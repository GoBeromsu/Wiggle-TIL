#include <iostream>

using namespace std;

int maps[10][10];      //각 노드들과 이어진 노드를 저장할 2차원 배열
int visited[10] = {0}; // 계산의 용이함을 위해 0번 인덱스를 사용하지 않을 것임으로 0을 추가해둡니다.
int num;               // 노드를 잇는 선분의 갯수를 저장할 변수 && 테스트 케이스를 입력받을 변수입니다.

void init()
{
    //각 노드들과 이어진 노드를 저장할 2차원 배열을 초기화합니다.
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            maps[i][j] = 0; // 모두 방문하지 않은 곳으로 체크합니다.
        }
    }
}

void dfs(int v)
{
    cout << v << endl; // 현재 노드 v를 방문했으므로 출력합니다.
    visited[v] = 0;    // v를 방문했으므로 체크합니다.
    for (int i = 0; i <= num; i++)
    {
        if (maps[v][i] && visited[i]) // v와 연결되어 있고, 방문하지 않은 노드가 있다면 방문합니다.
            dfs(i);                   // 방문하지 않은 그 노드로 이동합니다.
    }
}

int main(void)
{
    int v1, v2; // 연결된 두 노드를 저장할 변수
    init();     // 연결된 노드와 방문한 노드를 체크할 배열들을 초기화합니다.
    cin >> num; // 연결된 지점의 갯수를 저장합니다.
    for (int i = 0; i < num; i++)
    {                                    // 연결된 지점의 갯수만큼 노드를 입력 받습니다.
        cin >> v1 >> v2;                 // 연결된 노드 2개를 입력 받습니다.
        maps[v1][v2] = maps[v2][v1] = 1; //각 노드끼리 연결된 노드를 저장합니다.
        visited[v1] = visited[v2] = 1;   // 아직 방문하지 않은 곳으로 체크합니다
    }
    dfs(1); // 1번 노드부터 탐색 시작;
}
